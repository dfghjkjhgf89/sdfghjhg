import asyncio
import logging
import re
import datetime
from functools import wraps
import aiohttp
import uuid
import hashlib
import json
from sqlalchemy import and_

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

from config import (
    BOT_TOKEN,
    DEFAULT_REFERRAL_STATUS,
    ADMIN_TG_ACCOUNT,
    BOT_USERNAME,
    COMPANY_NAME,
    COMPANY_REGISTRATION_NUMBER,
    COMPANY_ADDRESS,
    COMPANY_BANK,
    COMPANY_ACCOUNT,
    COMPANY_SWIFT,
    COMPANY_IBAN,
    TBANK_SHOP_ID,
    TBANK_SECRET_KEY
)
from database import init_db, get_db
from models import User, Subscription, Whitelist, StopCommand, Payment, PaymentStatus, PaymentMethod

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)

SUBSCRIPTION_DURATION = datetime.timedelta(minutes=10)  # –¢–µ—Å—Ç–æ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - 10 –º–∏–Ω—É—Ç

class RegistrationStates(StatesGroup):
    waiting_for_email = State()

main_inline_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç", callback_data="my_account")],
        [InlineKeyboardButton(text="üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="ref_link")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∏", callback_data="ref_status")],
        [InlineKeyboardButton(text="‚è≥ –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="my_subscription")],
        [InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
    ]
)

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç"), KeyboardButton(text="üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∏"), KeyboardButton(text="‚è≥ –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞")],
        [KeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
    ],
    resize_keyboard=True
)

def is_valid_email(email: str) -> bool:
    return "@" in email and "." in email

def check_registered_active(func):
    @wraps(func)
    async def wrapper(message_or_cq: types.Message | types.CallbackQuery, state: FSMContext | None = None, *args, **kwargs):
        if isinstance(message_or_cq, types.Message):
            user_tg = message_or_cq.from_user
            target_message = message_or_cq
        elif isinstance(message_or_cq, types.CallbackQuery):
            user_tg = message_or_cq.from_user
            target_message = message_or_cq.message
            await message_or_cq.answer()
        else:
            logger.error(f"check_registered_active applied to unsupported type: {type(message_or_cq)}")
            return

        telegram_id = user_tg.id
        user_db: User | None = None

        with get_db() as db:
            user_db = db.query(User).filter(User.telegram_id == telegram_id).first()

            if not user_db or not user_db.email or user_db.email.startswith("temp_") or not user_db.is_active:
                logger.warning(f"Access denied for {telegram_id} by check_registered_active: Not registered, no email, or inactive.")
                await target_message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (–∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω), –∏—Å–ø–æ–ª—å–∑—É—è /start.")
                if state and (not user_db or not user_db.email or user_db.email.startswith("temp_")):
                    logger.info(f"Redirecting user {telegram_id} to email input.")
                    if not user_db:
                        await state.update_data(new_telegram_id=telegram_id, new_username=user_tg.username)
                    else:
                        await state.update_data(user_id_to_update=user_db.id)
                    await target_message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", reply_markup=ReplyKeyboardRemove())
                    await state.set_state(RegistrationStates.waiting_for_email)
                return

            kwargs['user'] = user_db
            return await func(message_or_cq, *args, **kwargs)

    return wrapper

def check_access(handler):
    @wraps(handler)
    async def wrapper(message_or_cq: types.Message | types.CallbackQuery, state: FSMContext | None = None, *args, **kwargs):
        if isinstance(message_or_cq, types.Message):
            user_tg = message_or_cq.from_user
            target_message = message_or_cq
        elif isinstance(message_or_cq, types.CallbackQuery):
            user_tg = message_or_cq.from_user
            target_message = message_or_cq.message
            await message_or_cq.answer()
        else:
            logger.error(f"check_access applied to unsupported type: {type(message_or_cq)}")
            return
        
        telegram_id = user_tg.id
        user_db: User | None = None
        access_granted = False
        now = datetime.datetime.now(datetime.timezone.utc)

        with get_db() as db:
            user_db = db.query(User).filter(User.telegram_id == telegram_id).first()

            if not user_db or not user_db.email or user_db.email.startswith("temp_") or not user_db.is_active:
                logger.warning(f"Access denied for {telegram_id} by check_access: Not registered, no email, or inactive.")
                await target_message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (–∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω), –∏—Å–ø–æ–ª—å–∑—É—è /start.")
                if state and (not user_db or not user_db.email or user_db.email.startswith("temp_")):
                     logger.info(f"Redirecting user {telegram_id} to email input.")
                     if not user_db:
                         await state.update_data(new_telegram_id=telegram_id, new_username=user_tg.username)
                     else:
                         await state.update_data(user_id_to_update=user_db.id)
                     await target_message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", reply_markup=ReplyKeyboardRemove())
                     await state.set_state(RegistrationStates.waiting_for_email)
                return

            logger.debug(f"Checking whitelist for telegram_id: {telegram_id} (type: {type(telegram_id)})")
            whitelist_entry = db.query(Whitelist).filter(Whitelist.telegram_id == telegram_id).first()
            logger.debug(f"Whitelist query result for {telegram_id}: {whitelist_entry}")
            is_whitelisted = whitelist_entry is not None
            if is_whitelisted:
                logger.info(f"Access granted for {telegram_id}: Whitelisted.")
                access_granted = True
            else:
                active_subscription = (db.query(Subscription)
                                       .filter(Subscription.user_id == user_db.id)
                                       .filter(Subscription.end_date > now)
                                       .filter(Subscription.is_active == True)
                                       .order_by(Subscription.end_date.desc())
                                       .first())
                if active_subscription:
                    logger.info(f"Access granted for {telegram_id}: Active subscription until {active_subscription.end_date}.")
                    access_granted = True

            if access_granted:
                kwargs['user'] = user_db
                return await handler(message_or_cq, *args, **kwargs)
            else:
                logger.warning(f"Access denied for {telegram_id}: No active subscription or whitelist entry.")
                await target_message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É.")
                return

    return wrapper

@dp.message(CommandStart())
async def handle_start(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    logger.info(f"User {telegram_id} ({username}) started the bot.")

    start_param = message.text.split()[1] if len(message.text.split()) > 1 else None
    
    if start_param:
        if start_param == "offer":
            await message.answer(
                "üìÑ –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
                "https://docs.google.com/document/d/1tgPqQTkjQDgftj-a0vNOgs53mi7-sctjv4WJ2BF9DTA/edit",
                disable_web_page_preview=True
            )
            return
        elif start_param == "privacy":
            await message.answer(
                "üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
                "https://docs.google.com/document/d/10s0vc9sBXMeC8a-_VGSXzCPi0Z5k4AMy/edit",
                disable_web_page_preview=True
            )
            return

    with get_db() as db:
        user = db.query(User).filter(User.telegram_id == telegram_id).first()

        if user:
            logger.info(f"User {telegram_id} already exists.")
            if not user.is_active:
                await message.answer("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
                return
            if not user.email or user.email.startswith("temp_"):
                logger.info(f"User {telegram_id} needs email. Setting state.")
                await state.update_data(user_id_to_update=user.id)
                await message.answer(
                    f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}! –ü–æ—Ö–æ–∂–µ, –≤–∞—à email –Ω–µ –±—ã–ª —É–∫–∞–∑–∞–Ω. \n"
                    "üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:",
                    reply_markup=ReplyKeyboardRemove()
                )
                await state.set_state(RegistrationStates.waiting_for_email)
            else:
                await message.answer(f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}!", reply_markup=main_keyboard)
        else:
            logger.info(f"New user: {telegram_id} ({username}). Requesting email.")
            await state.update_data(
                new_telegram_id=telegram_id,
                new_username=username
            )
            await message.answer(
                f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}! \n"
                "üìß –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É.",
                reply_markup=ReplyKeyboardRemove()
            )
            await state.set_state(RegistrationStates.waiting_for_email)

@dp.message(RegistrationStates.waiting_for_email, F.text)
async def handle_email(message: types.Message, state: FSMContext):
    email = message.text.strip()
    logger.info(f"Received email attempt: {email} from user {message.from_user.id}")

    if not is_valid_email(email):
        await message.answer("‚ùå –ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.")
        return

    with get_db() as db:
        existing_user_by_email = db.query(User).filter(User.email == email).first()
        user_data = await state.get_data()
        user_id_to_update = user_data.get('user_id_to_update')

        if existing_user_by_email and (not user_id_to_update or existing_user_by_email.id != user_id_to_update):
                await message.answer("‚ùå –≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π email.")
                return

        if user_id_to_update:
            user_to_update = db.query(User).filter(User.id == user_id_to_update).first()
            if user_to_update:
                user_to_update.email = email
                db.commit()
                logger.info(f"Email updated for user {user_to_update.telegram_id}.")
                await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à email –æ–±–Ω–æ–≤–ª–µ–Ω.", reply_markup=main_keyboard)
                await state.clear()
            else:
                logger.error(f"Could not find user with id {user_id_to_update} to update email.")
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start —Å–Ω–æ–≤–∞.")
                await state.clear()
        else:
            new_telegram_id = user_data.get('new_telegram_id')
            new_username = user_data.get('new_username')

            if not new_telegram_id:
                 logger.error(f"Missing new_telegram_id in state data for user {message.from_user.id}")
                 await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start —Å–Ω–æ–≤–∞.")
                 await state.clear()
                 return

            new_user = User(
                telegram_id=new_telegram_id,
                username=new_username,
                telegram_username=new_username,
                email=email
            )
            db.add(new_user)
            db.commit()
            logger.info(f"New user {new_telegram_id} registered with email {email}.")
            await message.answer("üéâ –°–ø–∞—Å–∏–±–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=main_keyboard)
            await state.clear()

@dp.message(RegistrationStates.waiting_for_email)
async def handle_email_incorrect_input(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email —Ç–µ–∫—Å—Ç–æ–º.")

@dp.message(F.text == "üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç")
@check_registered_active
async def handle_my_account(message: types.Message, *, user: User):
    logger.info(f"User {user.telegram_id} requested account info.")
    
    now = datetime.datetime.now(datetime.timezone.utc)
    access_status_text = "–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É ‚ùå"
    with get_db() as db:
        is_whitelisted = db.query(Whitelist).filter(Whitelist.telegram_id == user.telegram_id).first() is not None
        stop_command = db.query(StopCommand).filter(StopCommand.telegram_id == user.telegram_id).first()
        autopayment_status = "‚ùå –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã" if stop_command else "‚úÖ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –≤–∫–ª—é—á–µ–Ω—ã"
        
        if is_whitelisted:
            access_status_text = "‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É –µ—Å—Ç—å (–±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫)"
        else:
            active_subscription = (db.query(Subscription)
                                   .filter(Subscription.user_id == user.id)
                                   .filter(Subscription.end_date > now)
                                   .order_by(Subscription.end_date.desc())
                                   .first())
            if active_subscription:
                end_date_str = active_subscription.end_date.strftime("%d.%m.%Y %H:%M")
                access_status_text = f"‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É –µ—Å—Ç—å (–¥–æ {end_date_str} UTC)"

    account_info = (
        f"üë§ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç:\n"
        f"\nüÜî Telegram ID: `{user.telegram_id}`"
        f"\nüìß Email: `{user.email}`"
        f"\n{autopayment_status}"
        f"\n\n{access_status_text}"
    )
    await message.answer(account_info, parse_mode="Markdown")

@dp.message(F.text == "üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
@check_access
async def handle_referral_link(message: types.Message, *, user: User):
    logger.info(f"User {user.telegram_id} requested referral link.")
    
    start_param = user.referral_link_override if user.referral_link_override else user.telegram_id
    
    ref_link = f"https://t.me/{BOT_USERNAME}?start={start_param}"
    
    await message.answer(f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n`{ref_link}`", parse_mode="Markdown")

@dp.message(lambda message: message.text == "/stop")
@check_registered_active
async def handle_stop_command(message: types.Message, *, user: User):
    logger.info(f"User {user.telegram_id} used /stop command")
    
    with get_db() as db:
        existing_stop = db.query(StopCommand).filter(StopCommand.telegram_id == user.telegram_id).first()
        
        if existing_stop:
            await message.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏\n–ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ - –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /resume")
        else:
            stop_command = StopCommand(
                user_id=user.id,
                telegram_id=user.telegram_id
            )
            db.add(stop_command)
            db.commit()
            await message.answer("–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã! ‚ùå\n–ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ - –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /resume")

@dp.message(lambda message: message.text == "/resume")
@check_registered_active
async def handle_resume_command(message: types.Message, *, user: User):
    logger.info(f"User {user.telegram_id} used /resume command")
    
    with get_db() as db:
        existing_stop = db.query(StopCommand).filter(StopCommand.telegram_id == user.telegram_id).first()
        
        if existing_stop:
            db.delete(existing_stop)
            db.commit()
            await message.answer("–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã ‚úÖ\n–í —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–∏–µ!")
        else:
            await message.answer("‚úÖ –£ –≤–∞—Å —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏!\n–ß—Ç–æ–±—ã –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ - –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop")

@dp.message(F.text == "üìä –°—Ç–∞—Ç—É—Å —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∏")
@check_access
async def handle_referral_status(message: types.Message, *, user: User):
    logger.info(f"User {user.telegram_id} requested referral status.")
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –µ—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–µ –≤–∫–ª—é—á–∏–ª override
    status_flag = user.referral_status_override
    if status_flag is None:
        status_flag = False  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞

    status_icon = "‚úÖ" if status_flag else "‚ùå"
    status_text = "–ê–∫—Ç–∏–≤–Ω–∞" if status_flag else "–ù–µ –∞–∫—Ç–∏–≤–Ω–∞"

    await message.answer(f"üìä –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {status_icon} ({status_text})")

@dp.message(F.text == "‚è≥ –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞")
@check_registered_active
async def handle_my_subscription(message: types.Message, *, user: User):
    logger.info(f"User {user.telegram_id} requested subscription status.")
    now = datetime.datetime.now(datetime.timezone.utc)
    
    with get_db() as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        active_subscription = (db.query(Subscription)
                               .filter(Subscription.user_id == user.id)
                               .filter(Subscription.end_date > now)
                               .filter(Subscription.is_active == True)
                               .order_by(Subscription.end_date.desc())
                               .first())
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"Active subscription query result: {active_subscription}")
        if active_subscription:
            logger.info(f"Subscription details - End date: {active_subscription.end_date}, Now: {now}")
        
        is_whitelisted = db.query(Whitelist).filter(Whitelist.telegram_id == user.telegram_id).first() is not None
        
        if active_subscription:
            end_date_str = active_subscription.end_date.strftime("%d.%m.%Y %H:%M UTC")
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_access")]
                ]
            )
            await message.answer(
                f"‚úÖ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –æ–±—É—á–∞—é—â–µ–º—É –∫—É—Ä—Å—É –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: {end_date_str}\n\n"
                "–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=keyboard
            )
        elif is_whitelisted:
            await message.answer(
                "‚ú® –£ –≤–∞—Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É (–±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫)."
            )
        else:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 1500‚ÇΩ", callback_data="process_payment")]
                ]
            )
            await message.answer(
                "üìö –ü—Ä–æ–¥—É–∫—Ç: –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç \"–°–ò–°–¢–ï–ú–ù–ò–ö –£–ë–¢ –ü–†–ò–í–ê–¢\"\n\n"
                "üóì –¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω: –°–ò–°–¢–ï–ú–ù–ò–ö –£–ë–¢ (–ö–∞—Ä—Ç–∞ –†–§)\n\n"
                "üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: 1500 RUB\n\n"
                "‚ú® –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø:\n\n"
                "üì± –ì—Ä—É–ø–ø–∞ ¬´–°–ò–°–¢–ï–ú–ù–ò–ö –£–ë–¢ –ü–†–ò–í–ê–¢¬ª\n\n"
                "üìã –û–ø–ª–∞—á–∏–≤–∞—è –ø–æ–¥–ø–∏—Å–∫—É –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è "
                "[–ü—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã](https://docs.google.com/document/d/1tgPqQTkjQDgftj-a0vNOgs53mi7-sctjv4WJ2BF9DTA/edit) –∏ "
                "[–ü–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏](https://docs.google.com/document/d/10s0vc9sBXMeC8a-_VGSXzCPi0Z5k4AMy/edit)",
                reply_markup=keyboard,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )

@dp.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
@check_registered_active
async def handle_support(message: types.Message, *, user: User):
    logger.info(f"User {user.telegram_id} requested support.")
    await message.answer(
        "‚ÑπÔ∏è –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∏—Ç—å, —á–∏—Ç–∞–µ–º:\n\n"
        "‚ö†Ô∏è –ë–æ—Ç –∏–Ω–æ–≥–¥–∞ –Ω–µ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –±–æ–ª—å—à–∏–º–∏ –Ω–∞–ø–ª—ã–≤–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. "
        "–ü—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç, –∏–ª–∏ —á–µ—Ä–µ–∑ —á–∞—Å, –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ —Ä–∞–Ω–æ –∏–ª–∏ –ø–æ–∑–¥–Ω–æ –≤—Å—ë –ø—Ä–æ–≥—Ä—É–∑–∏—Ç—Å—è!\n\n"
        "üì® –¢–æ–ª—å–∫–æ –ø–æ –¥–æ–ª–≥–∏–º –ø—Ä–æ–±–ª–µ–º–∞–º —Å –æ–ø–ª–∞—Ç–æ–π ‚Äî @" + ADMIN_TG_ACCOUNT
    )

@dp.callback_query(F.data == "process_payment")
@check_registered_active
async def handle_process_payment(callback: types.CallbackQuery, *, user: User):
    logger.info("–ù–ê–ñ–ê–¢–ê –ö–ù–û–ü–ö–ê –û–ü–õ–ê–¢–ò–¢–¨ 1500–†")
    order_id = f"{user.telegram_id}_{int(datetime.datetime.now().timestamp())}"
    amount = 1500  # —Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
    description = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –°–ò–°–¢–ï–ú–ù–ò–ö –£–ë–¢ –ü–†–ò–í–ê–¢"
    try:
        pay_url, payment_id = await tbank_create_payment(int(amount), order_id, description, user.email)
        now = datetime.datetime.now(datetime.timezone.utc)
        with get_db() as db:
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.query(Subscription).filter(
                Subscription.user_id == user.id,
                Subscription.is_active == True
            ).update({
                'is_active': False,
                'auto_payment': False,
                'rebill_id': None
            })
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
            new_sub = Subscription(
                user_id=user.id,
                start_date=now,
                end_date=now + SUBSCRIPTION_DURATION,  # 10 –º–∏–Ω—É—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
                payment_amount=amount,
                is_active=False
            )
            db.add(new_sub)
            db.flush()  # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–¥–ø–∏—Å–∫–∏

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
            new_payment = Payment(
                user_id=user.id,
                subscription_id=new_sub.id,
                payment_id=payment_id,
                amount=amount,
                currency='RUB',
                status=PaymentStatus.PENDING,
                payment_method=PaymentMethod.CARD
            )
            db.add(new_payment)
            db.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer()
        return
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=pay_url)],
            [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{payment_id}")],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back")]
        ]
    )
    await callback.message.edit_text(
        f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'.\n\n"
        f"–°—É–º–º–∞: {amount}‚ÇΩ\n"
        f"‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: 10 –º–∏–Ω—É—Ç (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("check_payment_"))
@check_registered_active
async def handle_check_payment(callback: types.CallbackQuery, *, user: User):
    payment_id = callback.data.replace("check_payment_", "")
    logger.info(f"Checking payment {payment_id} for user {user.telegram_id}")
    
    if not payment_id.isdigit():
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –æ–ø–ª–∞—Ç—É –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –∏ –∫–∞—Ä—Ç–µ
    payment_info = await tbank_get_payment_info(payment_id)
    logger.info(f"Payment info received: {payment_info}")
    
    if not payment_info or not payment_info.get("Success"):
        await callback.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –æ–ø–ª–∞—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.", show_alert=True)
        return

    if payment_info.get("Status") == "CONFIRMED":
        now = datetime.datetime.now(datetime.timezone.utc)
        logger.info(f"Payment confirmed at {now}")
        
        with get_db() as db:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ payment_id
            payment = db.query(Payment).filter(
                Payment.payment_id == payment_id,
                Payment.user_id == user.id
            ).first()
            
            if not payment:
                logger.error(f"Payment {payment_id} not found in database for user {user.id}")
                await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –æ–ø–ª–∞—Ç—É –∑–∞–Ω–æ–≤–æ.", show_alert=True)
                return
                
            sub = db.query(Subscription).filter(
                Subscription.id == payment.subscription_id,
                Subscription.user_id == user.id
            ).first()
            
            if sub:
                logger.info(f"Found subscription {sub.id}, updating...")
                sub.is_active = True
                sub.end_date = now + SUBSCRIPTION_DURATION
                sub.auto_payment = True
                sub.rebill_id = payment_info.get("RebillId")
                sub.last_payment_date = now
                sub.next_payment_date = now + SUBSCRIPTION_DURATION
                sub.payment_amount = payment_info.get("Amount", 1500) / 100
                sub.failed_payments = 0
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                payment.status = PaymentStatus.COMPLETED
                payment.completed_at = now
                
                db.commit()
                logger.info(f"Subscription {sub.id} updated successfully. End date: {sub.end_date}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url="https://t.me/+vy7Idslu1FQ4MWQy")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂", callback_data="disable_autopayment")]
            ]
        )
        
        end_time = (now + SUBSCRIPTION_DURATION).strftime("%H:%M:%S UTC")
        
        await callback.message.edit_text(
            "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
            f"‚è≥ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç (–¥–æ {end_time})\n\n"
            "üîÑ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –≤–∫–ª—é—á–µ–Ω. –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–∏–º –µ–≥–æ –µ—â–µ –Ω–∞ 10 –º–∏–Ω—É—Ç.\n"
            "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤ –º–µ–Ω—é ¬´–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞¬ª.\n\n"
            "üì± –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:",
            reply_markup=keyboard
        )
    else:
        await callback.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.", show_alert=True)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
@dp.callback_query(F.data == "disable_autopayment")
@check_registered_active
async def handle_disable_autopayment(callback: types.CallbackQuery, *, user: User):
    with get_db() as db:
        sub = db.query(Subscription).filter(
            Subscription.user_id == user.id,
            Subscription.is_active == True
        ).first()
        
        if sub and sub.auto_payment:
            sub.auto_payment = False
            sub.rebill_id = None
            db.commit()
            await callback.message.edit_text(
                "‚úÖ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω.\n"
                "–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[
                        InlineKeyboardButton(text="üîÑ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂", callback_data="enable_autopayment")
                    ]]
                )
            )
        else:
            await callback.answer("‚ùå –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω", show_alert=True)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
@dp.callback_query(F.data == "enable_autopayment")
@check_registered_active
async def handle_enable_autopayment(callback: types.CallbackQuery, *, user: User):
    with get_db() as db:
        sub = db.query(Subscription).filter(
            Subscription.user_id == user.id,
            Subscription.is_active == True
        ).first()
        
        if sub and not sub.auto_payment:
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è rebill_id
            await callback.message.edit_text(
                "–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≤–µ—Ä—à–∏—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂.\n"
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[
                        InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="process_payment")
                    ]]
                )
            )
        else:
            await callback.answer("‚úÖ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ —É–∂–µ –≤–∫–ª—é—á–µ–Ω", show_alert=True)

@dp.callback_query(F.data == "back")
async def process_back(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")

def generate_token(params: dict, secret_key: str) -> str:
    params = dict(params)
    params.pop('Token', None)
    params['Password'] = secret_key
    sorted_keys = sorted(params.keys())
    values_str = ''.join(str(params[k]) for k in sorted_keys)
    return hashlib.sha256(values_str.encode('utf-8')).hexdigest()

async def tbank_create_payment(amount: int, order_id: str, description: str, user_email: str) -> tuple[str, str]:
    url = "https://securepay.tinkoff.ru/v2/Init"
    payload = {
        "TerminalKey": TBANK_SHOP_ID,
        "Amount": amount * 100,  # —Å—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        "OrderId": order_id,
        "Description": description,
        "DATA": {
            "Email": user_email
        },
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        "Recurrent": "Y",  # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
        "CustomerKey": str(order_id.split('_')[0]),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º telegram_id –∫–∞–∫ CustomerKey
    }
    sign_params = {k: v for k, v in payload.items() if k not in ("Token", "DATA")}
    token = generate_token(sign_params, TBANK_SECRET_KEY)
    payload["Token"] = token
    headers = {"Content-Type": "application/json"}
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=payload, headers=headers) as resp:
            text = await resp.text()
            try:
                data = await resp.json()
            except Exception:
                raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {resp.status}, –æ—Ç–≤–µ—Ç: {text}")
            if data.get("Success"):
                return data["PaymentURL"], str(data["PaymentId"])
            else:
                raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {data}")

async def tbank_check_payment(payment_id: str) -> bool:
    url = "https://securepay.tinkoff.ru/v2/GetState"
    payload = {
        "TerminalKey": TBANK_SHOP_ID,
        "PaymentId": payment_id
    }
    token = generate_token(payload, TBANK_SECRET_KEY)
    payload["Token"] = token
    headers = {"Content-Type": "application/json"}
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=payload, headers=headers) as resp:
            text = await resp.text()
            try:
                data = await resp.json()
            except Exception:
                raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {resp.status}, –æ—Ç–≤–µ—Ç: {text}")
            return data.get('Status') in ('CONFIRMED', 'AUTHORIZED')

async def notify_user(telegram_id: int, message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        await bot.send_message(telegram_id, message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")

@dp.callback_query()
async def debug_all_callbacks(callback: types.CallbackQuery):
    logger.info(f"DEBUG CALLBACK: {callback.data}")
    await callback.answer()

async def tbank_get_payment_info(payment_id: str) -> dict:
    url = "https://securepay.tinkoff.ru/v2/GetState"
    payload = {
        "TerminalKey": TBANK_SHOP_ID,
        "PaymentId": payment_id
    }
    token = generate_token(payload, TBANK_SECRET_KEY)
    payload["Token"] = token
    headers = {"Content-Type": "application/json"}
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=payload, headers=headers) as resp:
            try:
                return await resp.json()
            except Exception:
                return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
async def process_auto_payments():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫."""
    logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
    
    now = datetime.datetime.now(datetime.timezone.utc)
    
    with get_db() as db:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–æ–º –∏ rebill_id
        subscriptions = db.query(Subscription).filter(
            and_(
                Subscription.auto_payment == True,
                Subscription.is_active == True,
                Subscription.next_payment_date <= now,
                Subscription.rebill_id.isnot(None)  # –¢–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∫–∏ —Å rebill_id
            )
        ).all()
        
        for subscription in subscriptions:
            try:
                # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
                payment = await tbank_create_payment(
                    amount=subscription.payment_amount,
                    description=f"–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É {subscription.id}",
                    rebill_id=subscription.rebill_id
                )
                
                if payment and payment.status == "success":
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
                    subscription.end_date = subscription.end_date + SUBSCRIPTION_DURATION
                    subscription.last_payment_date = now
                    subscription.next_payment_date = subscription.end_date - datetime.timedelta(days=1)
                    subscription.failed_payments = 0
                    
                    await notify_user(
                        subscription.user.telegram_id,
                        "‚úÖ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω. –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞."
                    )
                else:
                    subscription.failed_payments += 1
                    
                    if subscription.failed_payments >= 3:
                        subscription.auto_payment = False
                        subscription.rebill_id = None
                        await notify_user(
                            subscription.user.telegram_id,
                            "‚ùå –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑-–∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–µ—É–¥–∞—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã."
                        )
                    else:
                        await notify_user(
                            subscription.user.telegram_id,
                            f"‚ö†Ô∏è –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –Ω–µ —É–¥–∞–ª—Å—è (–ø–æ–ø—ã—Ç–∫–∞ {subscription.failed_payments}/3). –ú—ã –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
                        )
                
                db.commit()
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.id}: {e}")
                db.rollback()

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
async def schedule_auto_payments():
    while True:
        try:
            await process_auto_payments()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ —á–∞—Å–∞

async def tbank_create_rebill_payment(rebill_id: str, amount: int, order_id: str, description: str) -> bool:
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ."""
    url = "https://securepay.tinkoff.ru/v2/Init"
    payload = {
        "TerminalKey": TBANK_SHOP_ID,
        "Amount": amount * 100,  # —Å—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        "OrderId": order_id,
        "Description": description,
        "Recurrent": "Y",
        "PaymentMethod": "Recurrent",
        "RebillId": rebill_id
    }
    sign_params = {k: v for k, v in payload.items() if k not in ("Token", "DATA")}
    token = generate_token(sign_params, TBANK_SECRET_KEY)
    payload["Token"] = token
    headers = {"Content-Type": "application/json"}
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload, headers=headers) as resp:
                data = await resp.json()
                if data.get("Success"):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                    payment_id = str(data["PaymentId"])
                    for _ in range(3):  # –ü—Ä–æ–±—É–µ–º 3 —Ä–∞–∑–∞
                        await asyncio.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
                        payment_info = await tbank_get_payment_info(payment_id)
                        if payment_info and payment_info.get("Status") == "CONFIRMED":
                            return True
                    return False
                return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return False

async def main():
    logger.info("bot.py main() called!")
    logger.info("Initializing database...")
    init_db()
    logger.info("Database initialized.")

    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("Webhook deleted successfully")
    except Exception as e:
        logger.error(f"Failed to delete webhook: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
    asyncio.create_task(schedule_auto_payments())
    logger.info("Auto-payments scheduler started")

    logger.info("Starting bot polling...")
    await dp.start_polling(bot)
    logger.info("Polling stopped!")